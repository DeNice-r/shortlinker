org: dncwhy
app: shrtlnkr
service: shortlinker
frameworkVersion: '3'

custom:
  usersTableName: 'users-table-${sls:stage}'
  tokensTableName: 'tokens-table-${sls:stage}'
  linksTableName: 'links-table-${sls:stage}'
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    target: node18


provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:FullAccess
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [ TokensTable, Arn ]
            - Fn::GetAtt: [ LinksTable, Arn ]
            # Add ability to use global secondary indexes of the tables
            - Fn::Join: [ '', [ Fn::GetAtt: [ UsersTable, Arn ], '/*' ] ]
            - Fn::Join: [ '', [ Fn::GetAtt: [ TokensTable, Arn ], '/*' ] ]
            - Fn::Join: [ '', [ Fn::GetAtt: [ LinksTable, Arn ], '/*' ] ]
  httpApi:
    authorizers:
      jwtAuthorizer:
        type: request
        payloadVersion: "2.0"
        enableSimpleResponses: true
        identitySource:
          - $request.header.Authorization
        functionName: authorizer
        resultTtlInSeconds: 300

  environment:
    # DynamoDB table names
    USERS_TABLE: ${self:custom.usersTableName}
    TOKENS_TABLE: ${self:custom.tokensTableName}
    LINKS_TABLE: ${self:custom.linksTableName}

    # Auth-related variables
    SALT_ROUNDS: 10
    JWT_ACCESS_SECRET: secret1
    JWT_REFRESH_SECRET: secret2
    ACCESS_TOKEN_TTL_SECONDS: 3600 # 1 hour
    REFRESH_TOKEN_TTL_SECONDS: 84000 # 1 day


functions:
  authSignUp:
    handler: src/auth/signUp.handler
    events:
      - httpApi:
          path: /auth/sign-up
          method: post
  authSignIn:
    handler: src/auth/signIn.handler
    events:
      - httpApi:
          path: /auth/sign-in
          method: post
  authAuthorizer:
    handler: src/auth/authorizer.handler
  linksPut:
    handler: src/links/put.handler
    events:
      - httpApi:
          path: /links
          method: put
          authorizer:
            name: jwtAuthorizer

  linksRedirect:
    handler: src/links/redirect.handler
    events:
      - httpApi:
          path: /{id}
          method: get

  linksList:
    handler: src/links/list.handler
    events:
      - httpApi:
          path: /links
          method: get
          authorizer:
            name: jwtAuthorizer

  linksDeactivate:
    handler: src/links/deactivate.handler
    events:
      - httpApi:
          path: /links/{id}
          method: patch
          authorizer:
            name: jwtAuthorizer

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UsersByEmail
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.usersTableName}

    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: expiresAt
            AttributeType: N
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TokensByUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: TokensByExpiresAt
            KeySchema:
              - AttributeName: expiresAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tokensTableName}
    LinksTable:
      Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: expiresAt
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: LinksByUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: LinksByExpiresAt
            KeySchema:
              - AttributeName: expiresAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.linksTableName}

plugins:
  - serverless-esbuild
