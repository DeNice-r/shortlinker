org: dncwhy
app: shrtlnkr
service: shortlinker
frameworkVersion: '3'

custom:
  usersTableName: 'users-table-${sls:stage}'
  tokensTableName: 'tokens-table-${sls:stage}'
  linksTableName: 'links-table-${sls:stage}'

  # AWS will send an email to this address to verify it during the deployment
  verifiedEmail: 'user@company.com'

  documentation: ${file(serverless.doc.yml):documentation}

  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    target: node18


provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeLimits
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [ TokensTable, Arn ]
            - Fn::GetAtt: [ LinksTable, Arn ]
            # Add ability to use global secondary indexes of the tables
            - Fn::Join: [ '', [ Fn::GetAtt: [ UsersTable, Arn ], '/*' ] ]
            - Fn::Join: [ '', [ Fn::GetAtt: [ TokensTable, Arn ], '/*' ] ]
            - Fn::Join: [ '', [ Fn::GetAtt: [ LinksTable, Arn ], '/*' ] ]

        - Effect: Allow
          Action:
            - scheduler:CreateSchedule
            - iam:PassRole
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: '*'

        - Effect: Allow
          Action:
            - sts:AssumeRole
          Resource:
            - !GetAtt ExecutionRole.Arn

  httpApi:
    authorizers:
      jwtAuthorizer:
        type: request
        payloadVersion: "2.0"
        enableSimpleResponses: true
        identitySource:
          - $request.header.Authorization
        functionName: authAuthorizer
        resultTtlInSeconds: 300

  environment:
    MAIN_REGION: ${self:provider.region}

    # DynamoDB table names
    USERS_TABLE: ${self:custom.usersTableName}
    TOKENS_TABLE: ${self:custom.tokensTableName}
    LINKS_TABLE: ${self:custom.linksTableName}

    # Auth-related variables
    SALT_ROUNDS: 10
    JWT_ACCESS_SECRET: secret1
    JWT_REFRESH_SECRET: secret2
    ACCESS_TOKEN_TTL_SECONDS: 3600 # 1 hour
    REFRESH_TOKEN_TTL_SECONDS: 84000 # 1 day

    # Links-related variables
    LINK_TOKEN_LENGTH: 6

    IAM_EXECUTION_ROLE_ARN: !GetAtt ExecutionRole.Arn
    CRON_DEACTIVATE_FUNCTION_ARN: !Sub arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-linksCronDeactivate

    # SES-related variables
    VERIFIED_EMAIL: ${self:custom.verifiedEmail}

    # SQS-related variables
    DEACTIVATION_MAIL_QUEUE_URL: !Ref DeactivationMailQueue

functions:
  authSignUp:
    handler: src/auth/signUp.handler
    events:
      - httpApi:
          path: /auth/sign-up
          method: post
          documentation: ${file(serverless.doc.yml):endpoints.authSignUp}

  authSignIn:
    handler: src/auth/signIn.handler
    events:
      - httpApi:
          path: /auth/sign-in
          method: post
          documentation: ${file(serverless.doc.yml):endpoints.authSignIn}

  authAuthorizer:
    handler: src/auth/authorizer.handler

  linksPut:
    handler: src/links/put.handler
    events:
      - httpApi:
          path: /links
          method: put
          documentation: ${file(serverless.doc.yml):endpoints.linksPut}
          authorizer:
            name: jwtAuthorizer

  linksRedirect:
    handler: src/links/redirect.handler
    events:
      - httpApi:
          path: /{id}
          method: get

  linksList:
    handler: src/links/list.handler
    events:
      - httpApi:
          path: /links
          method: get
          documentation: ${file(serverless.doc.yml):endpoints.linksList}
          authorizer:
            name: jwtAuthorizer

  linksDeactivate:
    handler: src/links/deactivate.handler
    events:
      - httpApi:
          path: /links/{id}
          method: patch
          authorizer:
            name: jwtAuthorizer
          documentation: ${file(serverless.doc.yml):endpoints.linksDeactivate}

  linksCronDeactivate:
    handler: src/links/cronDeactivate.handler

  emailsSendDeactivationNotification:
    handler: src/emails/sendEmails.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ DeactivationMailQueue, Arn ]
          batchSize: 10
          maximumBatchingWindow: 300

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::GlobalTable
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UsersByEmail
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Replicas:
          - Region: us-east-1
          - Region: eu-west-1
        TableName: ${self:custom.usersTableName}

    TokensTable:
      Type: AWS::DynamoDB::GlobalTable
      Properties:
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TokensByUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Replicas:
          - Region: us-east-1
          - Region: eu-west-1
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        TableName: ${self:custom.tokensTableName}
    LinksTable:
      Type: AWS::DynamoDB::GlobalTable
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: expiresAt
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: LinksByUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: LinksByExpiresAt
            KeySchema:
              - AttributeName: expiresAt
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Replicas:
          - Region: us-east-1
          - Region: eu-west-1
        TableName: ${self:custom.linksTableName}

    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-executionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - scheduler.amazonaws.com
              Action:
                - sts:AssumeRole
        # Without this policy, the function won't ever run, and no errors will be thrown by the schedule or the scheduler
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-${self:provider.region}-executionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - !Sub arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-linksCronDeactivate
                    - !Sub arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-linksCronDeactivate:*

    DeactivationMailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-deactivationMailQueue
        VisibilityTimeout: 600
        MessageRetentionPeriod: 86400

    DeactivationNotificationEmailIdentity:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: ${self:custom.verifiedEmail}

plugins:
  - serverless-esbuild
  - serverless-openapi-documenter
